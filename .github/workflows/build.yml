name: GOSDK_RELEASE

on:
  workflow_dispatch:
    inputs:
      fixed_tag:
        description: 'type yes for building with tag v0.0.0'
        default: 'no'
        required: true
      version_tag:
        description: 'Input tag Example - v1.2.2'
        required: true
  push: 
    tags:
      - 'v*.*.*'

env:
  GITHUB_TOKEN: ${{ secrets.GOSDK }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04

    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
        
    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...      

  make:
    name: Make File
    runs-on: ubuntu-20.04

    needs: 
    - build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Create sdkfile
      run: |
        cat <<EOF > sdkversion.go
          package main
            import (
                "fmt"
                "github.com/0chain/gosdk/zcncore"
            )
            func main() {
                fmt.Println("gosdk version: ", zcncore.GetVersion())
            }
        EOF
        
    - name: Create SDK
      run: go build -o sdkversion sdkversion.go
      
    - name: Creating zip for Artifacts
      run: |
        zip -r artifact.zip .

    - name: Get Tag
      id: get_version
      run: |
        VERSION=$(echo ${GITHUB_REF#refs/*/} | head -c 6) 
        echo ::set-output name=TAG::${VERSION}     

    # - name: Create Release
    #   id: create_release
    #   if: steps.get_version.outputs.TAG != 'master'
    #   uses: zendesk/action-create-release@v1 
    #   with:
    #     tag_name: ${{ steps.get_version.outputs.TAG }}
    #     release_name: ${{ steps.get_version.outputs.TAG }}
    #     draft: false
    #     prerelease: false  
          
    - name: Create Release for Fixed v0.0.0
      id: create_release_fixed
      if: github.event.inputs.fixed_tag == 'yes' && github.event.inputs.version_tag == '' && steps.get_version.outputs.TAG == 'master'
      uses: zendesk/action-create-release@v1
      with:
        tag_name: v0.0.0
        release_name: v0.0.0
        draft: false
        prerelease: false

    - name: Create Release
      id: create_release_fix
      if: github.event.inputs.fixed_tag == 'no' && github.event.inputs.version_tag != '' && steps.get_version.outputs.TAG != 'master'
      uses: zendesk/action-create-release@v1 
      with:
        tag_name: ${{ github.event.inputs.version_tag }}
        release_name: ${{ github.event.inputs.version_tag }}
        draft: false
        prerelease: false

    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   if: steps.get_version.outputs.TAG != 'master'
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./artifact.zip
    #     asset_name: artifact.zip
    #     asset_content_type: application/zip

    # - name: Upload Release Asset For v0.0.0
    #   if: github.event.inputs.fixed_tag == 'yes' && github.event.inputs.version_tag != ''
    #   id: upload-release-asset_fixed
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release_fixed.outputs.upload_url }}
    #     asset_path: ./artifact.zip
    #     asset_name: artifact.zip
    #     asset_content_type: application/zip
        
  # zproxy:
  #   name: Triggering 0proxy Build
  #   runs-on: ubuntu-20.04

  #   needs: 
  #   - make
    
  #   steps:    
  #   - name: Triggering 0proxy Build
  #     uses: convictional/trigger-workflow-and-wait@v1.3.0
  #     with:
  #       owner: 0chain
  #       repo: 0proxy
  #       github_token: ${{ secrets.GOSDK }}
  #       workflow_file_name: build.yml
  #       ref: gitactionsfix
  #       inputs: '{"latest_tag":"no"}'
  #       propagate_failure: true
  #       trigger_workflow: true
  #       wait_workflow: true
