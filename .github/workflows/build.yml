name: GOSDK

# on:
#   workflow_dispatch:
#     inputs:
#       fixed_tag:
#         description: 'type yes for building with tag v0.0.0'
#         default: 'no'
#         required: true

env:
  GITHUB_TOKEN: ${{ secrets.GOSDK }}

on:
   push: 
     tags:
       - 'v*'
     branches: [ gitactionsfix ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
        
    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  make:
    name: make-file
    runs-on: ubuntu-20.04
    outputs:
      Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}

    needs: 
    - build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
      
    - name: Create sdkfile
      run: |
        cat <<EOF > sdkversion.go
          package main
            import (
                "fmt"
                "github.com/0chain/gosdk/zcncore"
            )
            func main() {
                fmt.Println("gosdk version: ", zcncore.GetVersion())
            }
        EOF
        
    - name: Create SDK
      run: go build -o sdkversion sdkversion.go
      
    - name: Creating zip for Artifacts
      run: |
        zip -r artifact.zip .
    - name: Install GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.7
      id: gitversion

    - name: Display GitVersion Outputs
      run: |
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
        
  deploy:
    runs-on: ubuntu-20.04
    needs: [build, make]
    if: github.ref == 'refs/heads/gitactionsfix'

    steps:
    - name: get tag commit hash
      id: tag-commit-hash
      run: |
        hash=${{ GITHUB.SHA }}
        echo "::set-output name=tag-hash::${hash}"
        echo $hash


  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1
  #     if: needs.make.outputs.CommitsSinceVersionSource > 0
  #     with: 
  #       tag_name: ${{ needs.make.outputs.Version }}
  #       release_name: Release ${{ needs.make.outputs.Version }}


    # - name: Get the version
    #   id: get_version
    #   run: |
    #       BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
    #       SHORT_SHA=$(echo $GITHUB_SHA | head -c 8)
    #       echo ::set-output name=BRANCH::${BRANCH}
    #       echo ::set-output name=VERSION::0.0.1 

    # - name: Create Release
    #   id: create_release
    #   uses: zendesk/action-create-release@v1 # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: v${{ steps.get_version.outputs.VERSION }}
    #     release_name: v${{ steps.get_version.outputs.VERSION }}
    #     body: |
    #       Changes in this Release
    #       - First Change
    #       - Second Change
    #     draft: false
    #     prerelease: false    

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   with:
    #     tag_name: ${{ steps.get_version.outputs.VERSION }}
    #     release_name: v-${{ steps.get_version.outputs.VERSION }}
    #     draft: false
    #     prerelease: false
    #     patch: true
          
    # - name: Create Release for Fixed v0.0.0
    #   id: create_release_fixed
    #   if: github.event.inputs.fixed_tag == 'yes'
    #   uses: actions/create-release@v1
    #   with:
    #     tag_name: v0.0.0
    #     release_name: v0.0.0
    #     draft: false
    #     prerelease: false      

    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./artifact.zip
    #     asset_name: artifact.zip
    #     asset_content_type: application/zip

    # - name: Upload Release Asset For v0.0.0
    #   if: github.event.inputs.fixed_tag == 'yes'
    #   id: upload-release-asset_fixed
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release_fixed.outputs.upload_url }}
    #     asset_path: ./artifact.zip
    #     asset_name: artifact.zip
    #     asset_content_type: application/zip
      
#     - name: Triggering 0proxy build
#       uses: convictional/trigger-workflow-and-wait@v1.3.0
#       with:
#         owner: 0chain
#         repo: 0proxy
#         github_token: ${{ secrets.GOSDK }}
#         workflow_file_name: build.yml
#         ref: master
#         propagate_failure: true
#         trigger_workflow: true
#         wait_workflow: true

#     - name: Triggering zboxmobile build
#       uses: convictional/trigger-workflow-and-wait@v1.3.0
#       with:
#         owner: 0chain
#         repo: zboxmobile
#         github_token: ${{ secrets.GOSDK }}
#         workflow_file_name: build.yml
#         ref: master
#         propagate_failure: true
#         trigger_workflow: true
#         wait_workflow: true

#     - name: Triggering zboxcli build
#       uses: convictional/trigger-workflow-and-wait@v1.3.0
#       with:
#         owner: 0chain
#         repo: zboxcli
#         github_token: ${{ secrets.GOSDK }}
#         workflow_file_name: build-linux.yaml
#         ref: master
#         propagate_failure: true
#         trigger_workflow: true
#         wait_workflow: true

#     - name: Triggering zwalletcli build
#       uses: convictional/trigger-workflow-and-wait@v1.3.0
#       with:
#         owner: 0chain
#         repo: zwalletcli
#         github_token: ${{ secrets.GOSDK }}
#         workflow_file_name: build.yaml
#         ref: master
#         propagate_failure: true
#         trigger_workflow: true
#         wait_workflow: true
